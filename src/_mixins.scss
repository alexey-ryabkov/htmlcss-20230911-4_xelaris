// @debug {
//   any-prop: "#{$font-size-def}";
// }

@mixin font($size: null, $weight: null, $family: null, $line-height: null, $letter-spacing: null) {
  // @if $size {} @else {
  //   $size: 12px; //$font-size-def;
  // }

  // $size: 12px;
  font-size: $size;

  // как-то я не понимаю как работают условия
  // если свойства не передаются, то их не нужно устанавливать 
/* 
  @if $weight {
    font-weight: $weight;
  } @else {
    font-weight: $font-weight-normal;
  }
 */
  // $font-weight: if($weight, $weight, $font-weight-normal); 
  $weight: 700;
  @if (not false)
  {
    $weight: 900;
  }
  font-weight: $weight;

  @if $family {
    font-family: $family;
  } @else {
    font-family: $font-family-def;
  }
  @if $line-height {
    @if $line-height==normal {
      line-height: normal;
    } @else {
      line-height: $line-height / $size;
    }
  } @else {
    line-height: 1.5;
  }
  @if (not $letter-spacing) or $letter-spacing==normal {
    letter-spacing: normal;
  } @else {
    letter-spacing: #{$letter-spacing / $size}em;
  }
}
@mixin font-def { /* semantic alias */
  @include font();
}

/* 
под это есть утилита @util truncate;
@mixin text-truncated {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  // width < $truncation-boundary;
} */

@mixin text-interactive {
  cursor: pointer;
  user-select: none;
}

// @util center;
/* @mixin centered($position: absolute) {
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);

  // @util position(absolute, 10px 20px null 5px); ?? 
  @if ($position) {
    position:$position;
  }
} */

// переписать на использование утилит circle и size ? если в миксинах можно утилиты использовать 
/* @mixin icon-box($size, $isPseudo: true, $isCircle: false) {
  if ($isPseudo) {
    content: '';
  }
  display: inline-block;

  @if (not $isCircle) {
    @include box($size);
  } @else {
    @include circle($size);
  }
} */
// @util circle(354em, lime);
// @mixin circle($size) {
//   @include box($size);
//   border-radius: $size / 2;
// }
// @util size
// @mixin box($width, $height: $width) {
//   width: $width;
//   height: $height;
// }



@mixin reset-geometry() {
  margin: 0;
  padding: 0;
  border: 0;
}

// миксины для флексов 
/* @mixin s {
  display: flex;
  justify-content: center;
  align-items: center;
}
@mixin evenly($gap: 0) {
  display: flex;
  gap: $gap;
  justify-content: space-between;
  align-items: center;  
} */

/*  определиться с способом записи переменных */

/* content-box rounded ? */
@mixin content-bordered($padding: 0, $borderRadius: 0.5em, $doBorderBox: true) {
  padding: $padding;
  border-radius: $borderRadius;

  background: var(--content-bg-color, white);

  /* border: 1px solid var(--content-border-color, #acb5bd); */
 
  @if ($doBorderBox) {
    box-sizing: border-box;
  }
}

//  @util hr; дл яполос типа как под табами
// @util triangle(30px, red, up); ? 
// мб где то нужне @util aspect-ratio(4:3);
// для медиа-кварей @util hd(2.75dppx) ? 

/// Creates a CSS triangle, which can be used for dropdown arrows, dropdown pips, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
///
/// @param {Number} $triangle-size - Width of the triangle.
/// @param {Color} $triangle-color - Color of the triangle.
/// @param {Keyword} $triangle-direction - Direction the triangle points. Can be `up`, `right`, `down`, or `left`.
/* @mixin css-triangle(
  $triangle-size,
  $triangle-color,
  $triangle-direction
) {
  display: block;
  width: 0;
  height: 0;

  border-style: solid;
  border-width: $triangle-size;

  content: '';

  @if ($triangle-direction == down) {
    border-bottom-width: 0;
    border-color: $triangle-color transparent transparent;
  }
  @if ($triangle-direction == up) {
    border-top-width: 0;
    border-color: transparent transparent $triangle-color;
  }
  @if ($triangle-direction == right) {
    border-right-width: 0;
    border-color: transparent transparent transparent $triangle-color;
  }
  @if ($triangle-direction == left) {
    border-left-width: 0;
    border-color: transparent $triangle-color transparent transparent;
  }
}
 */
